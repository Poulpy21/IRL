!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BezierCurve	src/bezierCurve.h	/^class BezierCurve : public IParametricCurve$/;"	c
BezierCurve	src/bezierCurve.cpp	/^BezierCurve::BezierCurve() : pts() {$/;"	f	class:BezierCurve
BinomCoefficient	src/bezierCurve.cpp	/^long BezierCurve::BinomCoefficient(long n, long k) {$/;"	f	class:BezierCurve
Cube	src/cube.h	/^class Cube : public Renderable$/;"	c
IParametricClosedCurve	src/parametricClosedCurve.h	/^class IParametricClosedCurve : public IParametricCurve {$/;"	c
IParametricCurve	src/parametricCurve.h	/^class IParametricCurve$/;"	c
Renderable	src/renderable.h	/^class Renderable$/;"	c
Viewer	src/viewer.h	/^class Viewer : public QGLViewer$/;"	c
Viewer	src/viewer.cpp	/^Viewer::Viewer() {$/;"	f	class:Viewer
_CUBE_	src/cube.h	2;"	d
_I_BEZIER_CURVE_	src/bezierCurve.h	3;"	d
_I_PARAMETRIC_CLOSED_CURVE_	src/parametricClosedCurve.h	3;"	d
_I_PARAMETRIC_CURVE_	src/parametricCurve.h	3;"	d
_RENDERABLE_	src/renderable.h	2;"	d
_VIEWER_	src/viewer.h	11;"	d
addPoint	src/bezierCurve.cpp	/^void BezierCurve::addPoint(GLfloat x, GLfloat y, GLfloat z) {$/;"	f	class:BezierCurve
addRenderable	src/viewer.cpp	/^void Viewer::addRenderable(Renderable *r)$/;"	f	class:Viewer
allNormals	src/cube.cpp	/^static GLfloat allNormals[] = { $/;"	v	file:
allVertices	src/cube.cpp	/^static GLfloat allVertices[] = { $/;"	v	file:
animate	src/renderable.h	/^		virtual void animate() {};$/;"	f	class:Renderable
animate	src/viewer.cpp	/^void Viewer::animate()$/;"	f	class:Viewer
drawArrays	src/cube.cpp	/^void Cube::drawArrays()$/;"	f	class:Cube
drawElements	src/cube.cpp	/^void Cube::drawElements()$/;"	f	class:Cube
drawImmediate	src/cube.cpp	/^void Cube::drawImmediate()$/;"	f	class:Cube
draw	src/cube.cpp	/^void Cube::draw()$/;"	f	class:Cube
draw	src/viewer.cpp	/^void Viewer::draw()$/;"	f	class:Viewer
getCoords	src/bezierCurve.cpp	/^GLfloat *BezierCurve::getCoords(double t) const {$/;"	f	class:BezierCurve
helpString	src/viewer.cpp	/^QString Viewer::helpString() const$/;"	f	class:Viewer
indices	src/cube.cpp	/^static GLubyte indices[6][4] = {$/;"	v	file:
init	src/renderable.h	/^		virtual void init(Viewer&) {};$/;"	f	class:Renderable
init	src/viewer.cpp	/^void Viewer::init()$/;"	f	class:Viewer
keyPressEvent	src/renderable.h	/^		virtual void keyPressEvent(QKeyEvent*, Viewer&) {};$/;"	f	class:Renderable
keyPressEvent	src/viewer.cpp	/^void Viewer::keyPressEvent(QKeyEvent *e)$/;"	f	class:Viewer
main	src/main.cpp	/^int main(int argc, char** argv)$/;"	f
mouseMoveEvent	src/renderable.h	/^		virtual void mouseMoveEvent(QMouseEvent*, Viewer&) {};$/;"	f	class:Renderable
mouseMoveEvent	src/viewer.cpp	/^void Viewer::mouseMoveEvent(QMouseEvent *e)$/;"	f	class:Viewer
normals	src/cube.cpp	/^static GLfloat normals[6][3] = {$/;"	v	file:
pts	src/bezierCurve.h	/^		list<GLfloat*> pts;$/;"	m	class:BezierCurve
renderableList	src/viewer.h	/^		list<Renderable *> renderableList;$/;"	m	class:Viewer
toogleLight	src/viewer.h	/^		bool toogleLight;$/;"	m	class:Viewer
toogleWireframe	src/viewer.h	/^		bool toogleWireframe;$/;"	m	class:Viewer
verify	src/parametricClosedCurve.h	/^		virtual void verify() const {$/;"	f	class:IParametricClosedCurve
verify	src/parametricCurve.h	/^		virtual void verify() const {};$/;"	f	class:IParametricCurve
vertices	src/cube.cpp	/^static GLfloat vertices[] = { $/;"	v	file:
~BezierCurve	src/bezierCurve.cpp	/^BezierCurve::~BezierCurve() {$/;"	f	class:BezierCurve
~IParametricCurve	src/parametricCurve.h	/^		virtual ~IParametricCurve() {};$/;"	f	class:IParametricCurve
~Renderable	src/renderable.h	/^		virtual ~Renderable() {};$/;"	f	class:Renderable
~Viewer	src/viewer.cpp	/^Viewer::~Viewer()$/;"	f	class:Viewer
